% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dot.R
\name{dot}
\alias{dot}
\title{Render and Export DOT Plots in R}
\usage{
dot(DOT, file = NULL, return = NULL)
}
\arguments{
\item{DOT}{DOT (graph description language) is a simplified and intuitive plain text graphical language.This argument takes a string containing the DOT script. It is advised to use single quotation mark for the DOT string since the script often includes double quotations which can crash the function.}

\item{file}{defines the file name for exporting the graph. The acceptable file extensions are \code{"ps"} for PostScript and \code{"svg"} for SVG format (see examples below).}

\item{return}{specifies if PS or SVG script should be printed in R console. The acceptable values are \code{"verbatim"} and \code{"cat"}. \code{"verbatim"} returns a single string which is assignable to an object. \code{"cat"} returns a concatenated string which is printed in multiple lines in the R console. Use the \code{"cat"} to append SVG graphics directly in dynamic document packages such as \code{knitr, Rmarkdown}, etc.}
}
\value{
By default, the function only renders and loads the DOT plot in RStudio but does not return any PS or SVG script. If the \code{return} argument is specified, it returns PostScript or SVG script. Note that for assigning the script returned from \code{dot()} to an object, only \code{"verbatim"} value can be used to create a string object.
}
\description{
DOT (graph description language) is a simplified and intuitive plain text graphical language. This package not only renders the DOT markup language in R, but also provides the possibility to export the graphs in PostScript and SVG (Scalable Vector Graphics) formats. The DOT package also supports literate programming packages such as Knitr and R2HTML. Visit \url{http://haghish.com/dot} for downloading examples of creating algorithms and several graphs for \code{Rmarkdown} and \code{R HTML} to generate dynamic procedural graphs in dynamic documents using the \code{DOT} package.
}
\examples{
#create a simple DOT graph and load it in RStudio
dot("digraph {A -> B;}")

#to produce a dynamic document including a diagram in 'rmarkdown'
\dontrun{
```{r echo=FALSE, results='asis'}
library(DOT)
dot("digraph {A -> B;}", return = "cat")
```}


#create a DOT graph and export a SVG file to the working directory
dot("digraph {A -> B; B -> C; B -> D;}", file = "myfile.svg")

#export the example above in PostScript format
dot("digraph {A -> B; B -> C; B -> D;}", file = "myfile.ps")

#create a DOT graph and save the script in a string object in R
myString <- dot("digraph {A -> B;}", return = "verbatim")
}
\author{
E. F. Haghish \cr
Medical Informatics and Biostatistics (IMBI) \cr
University of Freiburg, Germany \cr
\email{haghish@imbi.uni-freiburg.de} \cr
\cr
Department of Mathematics and Computer Science \cr
University of Southern Denmark \cr
\email{haghish@imada.sdu.dk}
}

